//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;


namespace Assembly_CSharp.Generated
{
    public struct CharacterSyncDataSerializer : ICommandDataSerializer<CharacterSyncData>
    {
        public void Serialize(ref DataStreamWriter writer, in CharacterSyncData data)
        {
            writer.WriteFloat(data.Horizontal);
            writer.WriteFloat(data.Vertical);
        }

        public void Deserialize(ref DataStreamReader reader, ref CharacterSyncData data)
        {
            data.Horizontal = reader.ReadFloat();
            data.Vertical = reader.ReadFloat();
        }

        public void Serialize(ref DataStreamWriter writer, in CharacterSyncData data, in CharacterSyncData baseline, NetworkCompressionModel compressionModel)
        {
            writer.WritePackedFloatDelta(data.Horizontal, baseline.Horizontal, compressionModel);
            writer.WritePackedFloatDelta(data.Vertical, baseline.Vertical, compressionModel);
        }

        public void Deserialize(ref DataStreamReader reader, ref CharacterSyncData data, in CharacterSyncData baseline, NetworkCompressionModel compressionModel)
        {
            data.Horizontal = reader.ReadPackedFloatDelta(baseline.Horizontal, compressionModel);
            data.Vertical = reader.ReadPackedFloatDelta(baseline.Vertical, compressionModel);
        }
    }
    public class CharacterSyncDataSendCommandSystem : CommandSendSystem<CharacterSyncDataSerializer, CharacterSyncData>
    {
        [BurstCompile]
        struct SendJob : IJobEntityBatch
        {
            public SendJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var sendJob = new SendJob{data = InitJobData()};
            ScheduleJobData(sendJob);
        }
    }
    public class CharacterSyncDataReceiveCommandSystem : CommandReceiveSystem<CharacterSyncDataSerializer, CharacterSyncData>
    {
        [BurstCompile]
        struct ReceiveJob : IJobEntityBatch
        {
            public ReceiveJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var recvJob = new ReceiveJob{data = InitJobData()};
            ScheduleJobData(recvJob);
        }
    }
}
